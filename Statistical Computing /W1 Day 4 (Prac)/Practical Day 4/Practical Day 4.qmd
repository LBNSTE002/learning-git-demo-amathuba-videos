---
title: "Practical Day 4"
format: html
editor: visual
---

# Practical Day 4

## Set up

```{r}
# Install tidyverse if not already installed
if (!requireNamespace("tidyverse", quietly = TRUE)) {
  install.packages("tidyverse")
}
library(tidyverse)

# Install and load nycflights13 for flight data
if (!requireNamespace("nycflights13", quietly = TRUE)) {
  install.packages("nycflights13")
}
library(nycflights13)

```

## Question 1

### Display the `flights` dataset in an alternative format to simply printing it (i.e. running `flights`).

```{r}
library(nycflights13)
library(dplyr)

glimpse(flights)   # Provides a compact overview
head(flights)      # Shows the first few rows
summary(flights)   # Summary statistics
```

## Question 2

### Rewrite this code using `dplyr` and the pipe:

```{r}
library(tidyr)

dist_tbl <- flights %>%
  filter(month == 1) %>%
  group_by(carrier) %>%
  summarise(
    mean_distance = mean(distance, na.rm = TRUE),
    sd_distance = sd(distance, na.rm = TRUE)
  ) %>%
  arrange(mean_distance)

dist_tbl
```

## Question 3

### Explain why the standard deviation is `NA` for one carrier, and why it is `0` for others. Demonstrate your answer using code.

```{r}
#if a carrier has only one flight, the standard deviation is NA because there is no variability (you need at least two values for standard deviation).

#If a carrier has all flights of the same distance, the standard deviation is 0.

flights %>%
  filter(month == 1, carrier == "SomeCarrier") %>%
  summarise(
    count = n(),
    sd_distance = sd(distance, na.rm = TRUE)
  )
```

## Question 4

### Using  `tidyr` and `dplyr` where appropriate, construct a dataframe where the carriers are along the columns, and the rows are the average departure delay (`dep_delay`) flown by each carrier (`carrier`) in each month.

```{r}
delay_df <- flights %>%
  group_by(month, carrier) %>%
  summarise(avg_dep_delay = mean(dep_delay, na.rm = TRUE), .groups = "drop") %>%
  pivot_wider(names_from = carrier, values_from = avg_dep_delay)

delay_df
```

## Question 5

### Calculate the proportion of flights that were delayed (`dep_delay` greater than 0) but arrived on or before time (`arr_delay` less than or equal to 0).

```{r}
delayed_prop <- flights %>%
  summarise(
    prop = mean(dep_delay > 0 & arr_delay <= 0, na.rm = TRUE)
  )

delayed_prop
```

## Question 6

### Using the `airlines` and `flights` datasets, do the following, showing the output from each step:

#### Identify routes that more than one airline flies

```{r}
multi_airline_routes <- flights %>%
  group_by(origin, dest) %>%
  summarise(num_airlines = n_distinct(carrier), .groups = "drop") %>%
  filter(num_airlines > 1)

multi_airline_routes
```

#### For each such route, calculate the average arrival delay for each airline (exclude NAs). Find the names of these airlines.

```{r}
route_delay <- flights %>%
  filter(paste(origin, dest) %in% paste(multi_airline_routes$origin, multi_airline_routes$dest)) %>%
  group_by(origin, dest, carrier) %>%
  summarise(avg_arr_delay = mean(arr_delay, na.rm = TRUE), .groups = "drop")

route_delay
```

#### For each such route, identify the airline with the worst and best average arrival delay.

```{r}
best_worst_per_route <- route_delay %>%
  group_by(origin, dest) %>%
  summarise(
    best_airline = carrier[which.min(avg_arr_delay)],
    worst_airline = carrier[which.max(avg_arr_delay)],
    min_delay = min(avg_arr_delay, na.rm = TRUE),
    max_delay = max(avg_arr_delay, na.rm = TRUE),
    .groups = "drop"
  )

best_worst_per_route
```

#### Identify the route with the greatest difference between the best and worst performing airlines

```{r}
greatest_diff_route <- best_worst_per_route %>%
  mutate(diff = max_delay - min_delay) %>%
  arrange(desc(diff)) %>%
  slice(1)

greatest_diff_route
```

## Question 7

### Identify all columns with missing entries, typos and any other inconsistencies in the dataset below (load it just by running the code; created using `dput` command, FYI):

```{r}

# Load the dataset
data <- structure(list(
  id = c("id_1", "id_2", "id_3", "id_4", "id_5", "id_6", "id_7", 
         "id_8", "id_9", "id_10", "id_11", "id_12", "id_13", "id_14", 
         "id_15", "id_16", "id_17", "id_18", "id_19", "id_20", "id_21", 
         "id_22", "id_23", "id_24", "id_25", "id_26", "id_27", "id_28", 
         "id_29", "id_30", "id_31", "id_32", "id_33", "id_34", "id_35", 
         "id_36", "id_37", "id_38", "id_39", "id_40", "id_41", "id_42", 
         "id_43", "id_44", "id_45", "id_46", "id_47", "id_48", "id_49", "id_50"),
  age = c(50L, 34L, 70L, 33L, 22L, 61L, 69L, 73L, 62L, 56L, 71L, 33L, 73L, 44L, 
          45L, 46L, 24L, 70L, 46L, 76L, 47L, 76L, 28L, 48L, 54L, 27L, 45L, 26L, 
          61L, 28L, 38L, 55L, 33L, 36L, 62L, 58L, 72L, 31L, 34L, 51L, 61L, 64L, 
          26L, 28L, 60L, 29L, 42L, 46L, 79L, 72L),
  gender = c("male", "male", "male", "female", "female", "male", "female", "male", 
             "male", "female", "female", "male", "male", "female", "male", "male", 
             "male", "male", "female", "male", "male", "male", "male", "female", 
             "femal", "male", "female", "female", "female", "female", "male", 
             "female", "female", "female", "male", "male", "female", "male", 
             "female", "female", "male", "female", "female", "male", "male", 
             "female", "male", "male", "male", "female"),
  height = c(174.4, 197.7, 174.1, 194.5, NA, 180.4, 170.5, 157.4, 196.8, 165.1, 
             153, 197.4, 186, 157.1, 177.5, 197.7, 179.3, 170.2, 182.4, NA, 165.4, 
             161, 168.5, 199.2, 157.7, 154.6, 157.1, 184.5, 181, 194.6, 183.6, 
             186.9, 176.1, 183, 191.1, 189.3, 199, 172, 165.6, 170.5, 150.5, 159.2, 
             192.1, 161.6, 162, 153.8, 162.3, 186.6, 192.4, 174.9),
  disease_status = c("diseased", "healthy", "healthy", "healthy", "healthy", "healthy", 
                     "diseased", "healthy", "diseased", "Healthy", "diseased", 
                     "healthy", "diseased", "healthy", "diseased", "healthy", 
                     "healthy", "healthy", "healthy", "healthy", "healthy", "diseased", 
                     "healthy", "diseased", "healthy", "healthy", "healthy", 
                     "healthy", "diseased", "diseased", "healthy", "healthy", 
                     "healthy", "diseased", "diseased", "diseased", "healthy", 
                     "diseased", "healthy", "healthy", "healthy", "healthy", 
                     "healthy", "diseased", "diseased", "diseased", "healthy", 
                     "healthy", "diseased", "diseased")
))

# Find missing values
missing_values <- sapply(data, function(x) sum(is.na(x)))
missing_values[missing_values > 0]

# Identify potential typos in categorical columns
check_typos <- function(column) {
  if (is.character(column)) {
    return(unique(column))
  }
  return(NULL)
}

typos <- sapply(data, check_typos)
typos <- typos[!sapply(typos, is.null)]
typos

# Check for inconsistencies
data$gender[data$gender == "femal"] <- "female"  # Fix typo
data$disease_status[data$disease_status == "Healthy"] <- "healthy"  # Standardize

# Summary of corrections
list(
  Missing_Values = missing_values[missing_values > 0],
  Unique_Categorical_Values = typos
)

```
