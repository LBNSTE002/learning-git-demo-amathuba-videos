[
  {
    "objectID": "Prac Day 4.html#set-up",
    "href": "Prac Day 4.html#set-up",
    "title": "Prac Day 4",
    "section": "Set up",
    "text": "Set up\n\n# Install tidyverse if not already installed\nif (!requireNamespace(\"tidyverse\", quietly = TRUE)) {\n  install.packages(\"tidyverse\")\n}\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.4     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\n\n# Install and load nycflights13 for flight data\nif (!requireNamespace(\"nycflights13\", quietly = TRUE)) {\n  install.packages(\"nycflights13\")\n}\nlibrary(nycflights13)"
  },
  {
    "objectID": "Prac Day 4.html#question-1",
    "href": "Prac Day 4.html#question-1",
    "title": "Prac Day 4",
    "section": "Question 1",
    "text": "Question 1\n\nDisplay the flights dataset in an alternative format to simply printing it (i.e. running flights).\n\nlibrary(nycflights13)\nlibrary(dplyr)\n\nglimpse(flights)   # Provides a compact overview\n\nRows: 336,776\nColumns: 19\n$ year           &lt;int&gt; 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2…\n$ month          &lt;int&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ day            &lt;int&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ dep_time       &lt;int&gt; 517, 533, 542, 544, 554, 554, 555, 557, 557, 558, 558, …\n$ sched_dep_time &lt;int&gt; 515, 529, 540, 545, 600, 558, 600, 600, 600, 600, 600, …\n$ dep_delay      &lt;dbl&gt; 2, 4, 2, -1, -6, -4, -5, -3, -3, -2, -2, -2, -2, -2, -1…\n$ arr_time       &lt;int&gt; 830, 850, 923, 1004, 812, 740, 913, 709, 838, 753, 849,…\n$ sched_arr_time &lt;int&gt; 819, 830, 850, 1022, 837, 728, 854, 723, 846, 745, 851,…\n$ arr_delay      &lt;dbl&gt; 11, 20, 33, -18, -25, 12, 19, -14, -8, 8, -2, -3, 7, -1…\n$ carrier        &lt;chr&gt; \"UA\", \"UA\", \"AA\", \"B6\", \"DL\", \"UA\", \"B6\", \"EV\", \"B6\", \"…\n$ flight         &lt;int&gt; 1545, 1714, 1141, 725, 461, 1696, 507, 5708, 79, 301, 4…\n$ tailnum        &lt;chr&gt; \"N14228\", \"N24211\", \"N619AA\", \"N804JB\", \"N668DN\", \"N394…\n$ origin         &lt;chr&gt; \"EWR\", \"LGA\", \"JFK\", \"JFK\", \"LGA\", \"EWR\", \"EWR\", \"LGA\",…\n$ dest           &lt;chr&gt; \"IAH\", \"IAH\", \"MIA\", \"BQN\", \"ATL\", \"ORD\", \"FLL\", \"IAD\",…\n$ air_time       &lt;dbl&gt; 227, 227, 160, 183, 116, 150, 158, 53, 140, 138, 149, 1…\n$ distance       &lt;dbl&gt; 1400, 1416, 1089, 1576, 762, 719, 1065, 229, 944, 733, …\n$ hour           &lt;dbl&gt; 5, 5, 5, 5, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 6, 6, 6…\n$ minute         &lt;dbl&gt; 15, 29, 40, 45, 0, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59, 0…\n$ time_hour      &lt;dttm&gt; 2013-01-01 05:00:00, 2013-01-01 05:00:00, 2013-01-01 0…\n\n\n\nhead(flights)      # Shows the first few rows\n\n# A tibble: 6 × 19\n   year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n  &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n1  2013     1     1      517            515         2      830            819\n2  2013     1     1      533            529         4      850            830\n3  2013     1     1      542            540         2      923            850\n4  2013     1     1      544            545        -1     1004           1022\n5  2013     1     1      554            600        -6      812            837\n6  2013     1     1      554            558        -4      740            728\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\n\nsummary(flights)   # Summary statistics\n\n      year          month             day           dep_time    sched_dep_time\n Min.   :2013   Min.   : 1.000   Min.   : 1.00   Min.   :   1   Min.   : 106  \n 1st Qu.:2013   1st Qu.: 4.000   1st Qu.: 8.00   1st Qu.: 907   1st Qu.: 906  \n Median :2013   Median : 7.000   Median :16.00   Median :1401   Median :1359  \n Mean   :2013   Mean   : 6.549   Mean   :15.71   Mean   :1349   Mean   :1344  \n 3rd Qu.:2013   3rd Qu.:10.000   3rd Qu.:23.00   3rd Qu.:1744   3rd Qu.:1729  \n Max.   :2013   Max.   :12.000   Max.   :31.00   Max.   :2400   Max.   :2359  \n                                                 NA's   :8255                 \n   dep_delay          arr_time    sched_arr_time   arr_delay       \n Min.   : -43.00   Min.   :   1   Min.   :   1   Min.   : -86.000  \n 1st Qu.:  -5.00   1st Qu.:1104   1st Qu.:1124   1st Qu.: -17.000  \n Median :  -2.00   Median :1535   Median :1556   Median :  -5.000  \n Mean   :  12.64   Mean   :1502   Mean   :1536   Mean   :   6.895  \n 3rd Qu.:  11.00   3rd Qu.:1940   3rd Qu.:1945   3rd Qu.:  14.000  \n Max.   :1301.00   Max.   :2400   Max.   :2359   Max.   :1272.000  \n NA's   :8255      NA's   :8713                  NA's   :9430      \n   carrier              flight       tailnum             origin         \n Length:336776      Min.   :   1   Length:336776      Length:336776     \n Class :character   1st Qu.: 553   Class :character   Class :character  \n Mode  :character   Median :1496   Mode  :character   Mode  :character  \n                    Mean   :1972                                        \n                    3rd Qu.:3465                                        \n                    Max.   :8500                                        \n                                                                        \n     dest              air_time        distance         hour      \n Length:336776      Min.   : 20.0   Min.   :  17   Min.   : 1.00  \n Class :character   1st Qu.: 82.0   1st Qu.: 502   1st Qu.: 9.00  \n Mode  :character   Median :129.0   Median : 872   Median :13.00  \n                    Mean   :150.7   Mean   :1040   Mean   :13.18  \n                    3rd Qu.:192.0   3rd Qu.:1389   3rd Qu.:17.00  \n                    Max.   :695.0   Max.   :4983   Max.   :23.00  \n                    NA's   :9430                                  \n     minute        time_hour                     \n Min.   : 0.00   Min.   :2013-01-01 05:00:00.00  \n 1st Qu.: 8.00   1st Qu.:2013-04-04 13:00:00.00  \n Median :29.00   Median :2013-07-03 10:00:00.00  \n Mean   :26.23   Mean   :2013-07-03 05:22:54.64  \n 3rd Qu.:44.00   3rd Qu.:2013-10-01 07:00:00.00  \n Max.   :59.00   Max.   :2013-12-31 23:00:00.00"
  },
  {
    "objectID": "Prac Day 4.html#question-2",
    "href": "Prac Day 4.html#question-2",
    "title": "Prac Day 4",
    "section": "Question 2",
    "text": "Question 2\n\nRewrite this code using dplyr and the pipe:\n\nlibrary(tidyr)\n\ndist_tbl &lt;- flights %&gt;%\n  filter(month == 1) %&gt;%\n  group_by(carrier) %&gt;%\n  summarise(\n    mean_distance = mean(distance, na.rm = TRUE),\n    sd_distance = sd(distance, na.rm = TRUE)\n  ) %&gt;%\n  arrange(mean_distance)\n\ndist_tbl\n\n# A tibble: 16 × 3\n   carrier mean_distance sd_distance\n   &lt;chr&gt;           &lt;dbl&gt;       &lt;dbl&gt;\n 1 YV               229          0  \n 2 9E               476.       334. \n 3 EV               522.       294. \n 4 US               536.       553. \n 5 MQ               566.       223. \n 6 FL               691.       142. \n 7 OO               733         NA  \n 8 WN               942.       496. \n 9 B6              1062.       681. \n10 DL              1220.       644. \n11 AA              1350.       626. \n12 UA              1462.       778. \n13 F9              1620          0  \n14 AS              2402          0  \n15 VX              2495.        98.2\n16 HA              4983          0"
  },
  {
    "objectID": "Prac Day 4.html#question-3",
    "href": "Prac Day 4.html#question-3",
    "title": "Prac Day 4",
    "section": "Question 3",
    "text": "Question 3\n\nExplain why the standard deviation is NA for one carrier, and why it is 0 for others. Demonstrate your answer using code.\n\n#if a carrier has only one flight, the standard deviation is NA because there is no variability (you need at least two values for standard deviation).\n\n#If a carrier has all flights of the same distance, the standard deviation is 0.\n\nflights %&gt;%\n  filter(month == 1, carrier == \"SomeCarrier\") %&gt;%\n  summarise(\n    count = n(),\n    sd_distance = sd(distance, na.rm = TRUE)\n  )\n\n# A tibble: 1 × 2\n  count sd_distance\n  &lt;int&gt;       &lt;dbl&gt;\n1     0          NA"
  },
  {
    "objectID": "Prac Day 4.html#question-4",
    "href": "Prac Day 4.html#question-4",
    "title": "Prac Day 4",
    "section": "Question 4",
    "text": "Question 4\n\nUsing  tidyr and dplyr where appropriate, construct a dataframe where the carriers are along the columns, and the rows are the average departure delay (dep_delay) flown by each carrier (carrier) in each month.\n\ndelay_df &lt;- flights %&gt;%\n  group_by(month, carrier) %&gt;%\n  summarise(avg_dep_delay = mean(dep_delay, na.rm = TRUE), .groups = \"drop\") %&gt;%\n  pivot_wider(names_from = carrier, values_from = avg_dep_delay)\n\ndelay_df\n\n# A tibble: 12 × 17\n   month  `9E`    AA     AS    B6    DL    EV    F9    FL    HA    MQ    OO\n   &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1     1 16.9   6.93  7.35   9.49  3.85 24.2  10     1.97 54.4   6.49 67   \n 2     2 16.5   8.28  0.722 13.8   5.54 21.5  29.8   5.18 17.4   8.09 NA   \n 3     3 13.4   8.70  8.42  14.2   9.93 26.2  16.8  17.3   1.16  7.19 NA   \n 4     4 13.6  11.7  11.3   15.2   8.17 22.8  24.6  13.1  -2.1  13.7  NA   \n 5     5 22.7   9.66  6.77   9.78  9.74 20.2  35.9  19.2  -1.45 13.9  NA   \n 6     6 29.0  14.6  13.1   20.4  18.7  25.5  29.4  38.8   1.47 20.8  61   \n 7     7 31.4  12.1   2.42  24.9  20.6  26.5  31.8  41.2  -1.71 20.7  NA   \n 8     8 17.3   7.17  2.87  15.7   9.85 16.3  22.2  23.4   1.68 10.1  64   \n 9     9  7.75  5.69 -4.52   6.63  5.53  8.24  8.26 16.9  -5.44  5.35 -4.94\n10    10  9.33  3.00  0.677  2.96  3.42 13.4   9.70 13.7  -5.10  4.48 NA   \n11    11  7.56  3.10  3.08   3.52  2.85  9.83 13.5  16.9  -5.44  3.28  0.8 \n12    12 19.8  11.7  18.0   17.0  10.8  27.9  13.1  26.1  -3.14 12.7  NA   \n# ℹ 5 more variables: UA &lt;dbl&gt;, US &lt;dbl&gt;, VX &lt;dbl&gt;, WN &lt;dbl&gt;, YV &lt;dbl&gt;"
  },
  {
    "objectID": "Prac Day 4.html#question-5",
    "href": "Prac Day 4.html#question-5",
    "title": "Prac Day 4",
    "section": "Question 5",
    "text": "Question 5\n\nCalculate the proportion of flights that were delayed (dep_delay greater than 0) but arrived on or before time (arr_delay less than or equal to 0).\n\ndelayed_prop &lt;- flights %&gt;%\n  summarise(\n    prop = mean(dep_delay &gt; 0 & arr_delay &lt;= 0, na.rm = TRUE)\n  )\n\ndelayed_prop\n\n# A tibble: 1 × 1\n   prop\n  &lt;dbl&gt;\n1 0.108"
  },
  {
    "objectID": "Prac Day 4.html#question-6",
    "href": "Prac Day 4.html#question-6",
    "title": "Prac Day 4",
    "section": "Question 6",
    "text": "Question 6\n\nUsing the airlines and flights datasets, do the following, showing the output from each step:\n\nIdentify routes that more than one airline flies\n\nmulti_airline_routes &lt;- flights %&gt;%\n  group_by(origin, dest) %&gt;%\n  summarise(num_airlines = n_distinct(carrier), .groups = \"drop\") %&gt;%\n  filter(num_airlines &gt; 1)\n\nmulti_airline_routes\n\n# A tibble: 128 × 3\n   origin dest  num_airlines\n   &lt;chr&gt;  &lt;chr&gt;        &lt;int&gt;\n 1 EWR    ATL              4\n 2 EWR    AUS              2\n 3 EWR    BDL              2\n 4 EWR    BNA              2\n 5 EWR    BOS              3\n 6 EWR    BWI              2\n 7 EWR    CHS              2\n 8 EWR    CLE              2\n 9 EWR    CLT              3\n10 EWR    CVG              2\n# ℹ 118 more rows\n\n\n\n\nFor each such route, calculate the average arrival delay for each airline (exclude NAs). Find the names of these airlines.\n\nroute_delay &lt;- flights %&gt;%\n  filter(paste(origin, dest) %in% paste(multi_airline_routes$origin, multi_airline_routes$dest)) %&gt;%\n  group_by(origin, dest, carrier) %&gt;%\n  summarise(avg_arr_delay = mean(arr_delay, na.rm = TRUE), .groups = \"drop\")\n\nroute_delay\n\n# A tibble: 343 × 4\n   origin dest  carrier avg_arr_delay\n   &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;           &lt;dbl&gt;\n 1 EWR    ATL   9E              -6.25\n 2 EWR    ATL   DL              10.0 \n 3 EWR    ATL   EV              19.5 \n 4 EWR    ATL   UA              10.5 \n 5 EWR    AUS   UA               4.28\n 6 EWR    AUS   WN             -11.2 \n 7 EWR    BDL   EV               6.78\n 8 EWR    BDL   UA              22.6 \n 9 EWR    BNA   EV              17.7 \n10 EWR    BNA   WN              -2.13\n# ℹ 333 more rows\n\n\n\n\nFor each such route, identify the airline with the worst and best average arrival delay.\n\nbest_worst_per_route &lt;- route_delay %&gt;%\n  group_by(origin, dest) %&gt;%\n  summarise(\n    best_airline = carrier[which.min(avg_arr_delay)],\n    worst_airline = carrier[which.max(avg_arr_delay)],\n    min_delay = min(avg_arr_delay, na.rm = TRUE),\n    max_delay = max(avg_arr_delay, na.rm = TRUE),\n    .groups = \"drop\"\n  )\n\nbest_worst_per_route\n\n# A tibble: 128 × 6\n   origin dest  best_airline worst_airline min_delay max_delay\n   &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;        &lt;chr&gt;             &lt;dbl&gt;     &lt;dbl&gt;\n 1 EWR    ATL   9E           EV               -6.25      19.5 \n 2 EWR    AUS   WN           UA              -11.2        4.28\n 3 EWR    BDL   EV           UA                6.78      22.6 \n 4 EWR    BNA   WN           EV               -2.13      17.7 \n 5 EWR    BOS   EV           B6               -4.01       6.87\n 6 EWR    BWI   WN           EV                5.95      20.1 \n 7 EWR    CHS   UA           EV              -14         16.2 \n 8 EWR    CLE   EV           UA               -3.71       5.97\n 9 EWR    CLT   US           EV                0.920     20.5 \n10 EWR    CVG   9E           EV                1.40      21.2 \n# ℹ 118 more rows\n\n\n\n\nIdentify the route with the greatest difference between the best and worst performing airlines\n\ngreatest_diff_route &lt;- best_worst_per_route %&gt;%\n  mutate(diff = max_delay - min_delay) %&gt;%\n  arrange(desc(diff)) %&gt;%\n  slice(1)\n\ngreatest_diff_route\n\n# A tibble: 1 × 7\n  origin dest  best_airline worst_airline min_delay max_delay  diff\n  &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;        &lt;chr&gt;             &lt;dbl&gt;     &lt;dbl&gt; &lt;dbl&gt;\n1 JFK    ATL   9E           EV                 1.40       128  127."
  },
  {
    "objectID": "Prac Day 4.html#question-7",
    "href": "Prac Day 4.html#question-7",
    "title": "Prac Day 4",
    "section": "Question 7",
    "text": "Question 7\n\nIdentify all columns with missing entries, typos and any other inconsistencies in the dataset below (load it just by running the code; created using dput command, FYI):\n\n# Load the dataset\ndata &lt;- structure(list(\n  id = c(\"id_1\", \"id_2\", \"id_3\", \"id_4\", \"id_5\", \"id_6\", \"id_7\", \n         \"id_8\", \"id_9\", \"id_10\", \"id_11\", \"id_12\", \"id_13\", \"id_14\", \n         \"id_15\", \"id_16\", \"id_17\", \"id_18\", \"id_19\", \"id_20\", \"id_21\", \n         \"id_22\", \"id_23\", \"id_24\", \"id_25\", \"id_26\", \"id_27\", \"id_28\", \n         \"id_29\", \"id_30\", \"id_31\", \"id_32\", \"id_33\", \"id_34\", \"id_35\", \n         \"id_36\", \"id_37\", \"id_38\", \"id_39\", \"id_40\", \"id_41\", \"id_42\", \n         \"id_43\", \"id_44\", \"id_45\", \"id_46\", \"id_47\", \"id_48\", \"id_49\", \"id_50\"),\n  age = c(50L, 34L, 70L, 33L, 22L, 61L, 69L, 73L, 62L, 56L, 71L, 33L, 73L, 44L, \n          45L, 46L, 24L, 70L, 46L, 76L, 47L, 76L, 28L, 48L, 54L, 27L, 45L, 26L, \n          61L, 28L, 38L, 55L, 33L, 36L, 62L, 58L, 72L, 31L, 34L, 51L, 61L, 64L, \n          26L, 28L, 60L, 29L, 42L, 46L, 79L, 72L),\n  gender = c(\"male\", \"male\", \"male\", \"female\", \"female\", \"male\", \"female\", \"male\", \n             \"male\", \"female\", \"female\", \"male\", \"male\", \"female\", \"male\", \"male\", \n             \"male\", \"male\", \"female\", \"male\", \"male\", \"male\", \"male\", \"female\", \n             \"femal\", \"male\", \"female\", \"female\", \"female\", \"female\", \"male\", \n             \"female\", \"female\", \"female\", \"male\", \"male\", \"female\", \"male\", \n             \"female\", \"female\", \"male\", \"female\", \"female\", \"male\", \"male\", \n             \"female\", \"male\", \"male\", \"male\", \"female\"),\n  height = c(174.4, 197.7, 174.1, 194.5, NA, 180.4, 170.5, 157.4, 196.8, 165.1, \n             153, 197.4, 186, 157.1, 177.5, 197.7, 179.3, 170.2, 182.4, NA, 165.4, \n             161, 168.5, 199.2, 157.7, 154.6, 157.1, 184.5, 181, 194.6, 183.6, \n             186.9, 176.1, 183, 191.1, 189.3, 199, 172, 165.6, 170.5, 150.5, 159.2, \n             192.1, 161.6, 162, 153.8, 162.3, 186.6, 192.4, 174.9),\n  disease_status = c(\"diseased\", \"healthy\", \"healthy\", \"healthy\", \"healthy\", \"healthy\", \n                     \"diseased\", \"healthy\", \"diseased\", \"Healthy\", \"diseased\", \n                     \"healthy\", \"diseased\", \"healthy\", \"diseased\", \"healthy\", \n                     \"healthy\", \"healthy\", \"healthy\", \"healthy\", \"healthy\", \"diseased\", \n                     \"healthy\", \"diseased\", \"healthy\", \"healthy\", \"healthy\", \n                     \"healthy\", \"diseased\", \"diseased\", \"healthy\", \"healthy\", \n                     \"healthy\", \"diseased\", \"diseased\", \"diseased\", \"healthy\", \n                     \"diseased\", \"healthy\", \"healthy\", \"healthy\", \"healthy\", \n                     \"healthy\", \"diseased\", \"diseased\", \"diseased\", \"healthy\", \n                     \"healthy\", \"diseased\", \"diseased\")\n))\n\n# Find missing values\nmissing_values &lt;- sapply(data, function(x) sum(is.na(x)))\nmissing_values[missing_values &gt; 0]\n\nheight \n     2 \n\n\n\n# Identify potential typos in categorical columns\ncheck_typos &lt;- function(column) {\n  if (is.character(column)) {\n    return(unique(column))\n  }\n  return(NULL)\n}\n\ntypos &lt;- sapply(data, check_typos)\ntypos &lt;- typos[!sapply(typos, is.null)]\ntypos\n\n$id\n [1] \"id_1\"  \"id_2\"  \"id_3\"  \"id_4\"  \"id_5\"  \"id_6\"  \"id_7\"  \"id_8\"  \"id_9\" \n[10] \"id_10\" \"id_11\" \"id_12\" \"id_13\" \"id_14\" \"id_15\" \"id_16\" \"id_17\" \"id_18\"\n[19] \"id_19\" \"id_20\" \"id_21\" \"id_22\" \"id_23\" \"id_24\" \"id_25\" \"id_26\" \"id_27\"\n[28] \"id_28\" \"id_29\" \"id_30\" \"id_31\" \"id_32\" \"id_33\" \"id_34\" \"id_35\" \"id_36\"\n[37] \"id_37\" \"id_38\" \"id_39\" \"id_40\" \"id_41\" \"id_42\" \"id_43\" \"id_44\" \"id_45\"\n[46] \"id_46\" \"id_47\" \"id_48\" \"id_49\" \"id_50\"\n\n$gender\n[1] \"male\"   \"female\" \"femal\" \n\n$disease_status\n[1] \"diseased\" \"healthy\"  \"Healthy\" \n\n\n\n# Check for inconsistencies\ndata$gender[data$gender == \"femal\"] &lt;- \"female\"  # Fix typo\ndata$disease_status[data$disease_status == \"Healthy\"] &lt;- \"healthy\"  # Standardize\n\n# Summary of corrections\nlist(\n  Missing_Values = missing_values[missing_values &gt; 0],\n  Unique_Categorical_Values = typos\n)\n\n$Missing_Values\nheight \n     2 \n\n$Unique_Categorical_Values\n$Unique_Categorical_Values$id\n [1] \"id_1\"  \"id_2\"  \"id_3\"  \"id_4\"  \"id_5\"  \"id_6\"  \"id_7\"  \"id_8\"  \"id_9\" \n[10] \"id_10\" \"id_11\" \"id_12\" \"id_13\" \"id_14\" \"id_15\" \"id_16\" \"id_17\" \"id_18\"\n[19] \"id_19\" \"id_20\" \"id_21\" \"id_22\" \"id_23\" \"id_24\" \"id_25\" \"id_26\" \"id_27\"\n[28] \"id_28\" \"id_29\" \"id_30\" \"id_31\" \"id_32\" \"id_33\" \"id_34\" \"id_35\" \"id_36\"\n[37] \"id_37\" \"id_38\" \"id_39\" \"id_40\" \"id_41\" \"id_42\" \"id_43\" \"id_44\" \"id_45\"\n[46] \"id_46\" \"id_47\" \"id_48\" \"id_49\" \"id_50\"\n\n$Unique_Categorical_Values$gender\n[1] \"male\"   \"female\" \"femal\" \n\n$Unique_Categorical_Values$disease_status\n[1] \"diseased\" \"healthy\"  \"Healthy\""
  },
  {
    "objectID": "Prac 1.html#question-1",
    "href": "Prac 1.html#question-1",
    "title": "Prac 1",
    "section": "Question 1",
    "text": "Question 1\n\nFind all rows in “airquality” that have missing values\n\nmissing &lt;- airquality[rowSums(is.na(airquality)) &gt;0, ]\n\nmissing\n\n    Ozone Solar.R Wind Temp Month Day\n5      NA      NA 14.3   56     5   5\n6      28      NA 14.9   66     5   6\n10     NA     194  8.6   69     5  10\n11      7      NA  6.9   74     5  11\n25     NA      66 16.6   57     5  25\n26     NA     266 14.9   58     5  26\n27     NA      NA  8.0   57     5  27\n32     NA     286  8.6   78     6   1\n33     NA     287  9.7   74     6   2\n34     NA     242 16.1   67     6   3\n35     NA     186  9.2   84     6   4\n36     NA     220  8.6   85     6   5\n37     NA     264 14.3   79     6   6\n39     NA     273  6.9   87     6   8\n42     NA     259 10.9   93     6  11\n43     NA     250  9.2   92     6  12\n45     NA     332 13.8   80     6  14\n46     NA     322 11.5   79     6  15\n52     NA     150  6.3   77     6  21\n53     NA      59  1.7   76     6  22\n54     NA      91  4.6   76     6  23\n55     NA     250  6.3   76     6  24\n56     NA     135  8.0   75     6  25\n57     NA     127  8.0   78     6  26\n58     NA      47 10.3   73     6  27\n59     NA      98 11.5   80     6  28\n60     NA      31 14.9   77     6  29\n61     NA     138  8.0   83     6  30\n65     NA     101 10.9   84     7   4\n72     NA     139  8.6   82     7  11\n75     NA     291 14.9   91     7  14\n83     NA     258  9.7   81     7  22\n84     NA     295 11.5   82     7  23\n96     78      NA  6.9   86     8   4\n97     35      NA  7.4   85     8   5\n98     66      NA  4.6   87     8   6\n102    NA     222  8.6   92     8  10\n103    NA     137 11.5   86     8  11\n107    NA      64 11.5   79     8  15\n115    NA     255 12.6   75     8  23\n119    NA     153  5.7   88     8  27\n150    NA     145 13.2   77     9  27"
  },
  {
    "objectID": "Prac 1.html#question-2",
    "href": "Prac 1.html#question-2",
    "title": "Prac 1",
    "section": "Question 2",
    "text": "Question 2\n\nOzone Summary Statistics\n\nmean(airquality$Ozone, na.rm = TRUE)\n\n[1] 42.12931\n\n\n\nsd(airquality$Ozone, na.rm = TRUE)\n\n[1] 32.98788\n\n\n\nmin(airquality$Ozone, na.rm = TRUE)\n\n[1] 1\n\n\n\nmax(airquality$Ozone, na.rm = TRUE)\n\n[1] 168\n\n\n\n\nTemperature Summary Statistics\n\nmean(airquality$Temp, na.rm = TRUE)\n\n[1] 77.88235\n\n\n\nsd(airquality$Temp, na.rm = TRUE)\n\n[1] 9.46527\n\n\n\nmin(airquality$Temp, na.rm = TRUE)\n\n[1] 56\n\n\n\nmax(airquality$Temp, na.rm = TRUE)\n\n[1] 97"
  },
  {
    "objectID": "Prac 1.html#question-3",
    "href": "Prac 1.html#question-3",
    "title": "Prac 1",
    "section": "Question 3",
    "text": "Question 3\n\nResponse Variable (y)\n\nY &lt;- cars$dist\n\n\n\nDesign Matrix (x)\n\nX &lt;- cbind(1, cars$speed)\n\n\n\nParameter Estimates\n\nb_hat &lt;- solve( t(X) %*% (X) ) %*% t(X) %*% Y\n\nb_hat\n\n           [,1]\n[1,] -17.579095\n[2,]   3.932409"
  },
  {
    "objectID": "Prac 1.html#question-4",
    "href": "Prac 1.html#question-4",
    "title": "Prac 1",
    "section": "Question 4",
    "text": "Question 4\n\nLinear regression model using lm()\n\nlm(Y ~ cars$speed)\n\n\nCall:\nlm(formula = Y ~ cars$speed)\n\nCoefficients:\n(Intercept)   cars$speed  \n    -17.579        3.932"
  },
  {
    "objectID": "Prac 2.html#question-1",
    "href": "Prac 2.html#question-1",
    "title": "Prac 2",
    "section": "Question 1",
    "text": "Question 1\n\nGenerating Simulated Data\n\n# Set seed for reproducibility\nset.seed(1)\n\n# Generate x values from 1 to 100\nx &lt;- 1:100\n\n# Generate noise from a normal distribution with mean 0 and standard deviation 0.2\ne &lt;- rnorm(length(x), mean = 0, sd = 0.2)\n\n# Generate y values as a noisy sine wave\ny &lt;- sin(x / 10) + e\n\n# Combine into a data frame\nsim_data &lt;- data.frame(x, y)\n\n# Plot the simulated data\nplot(x, y, main = \"Simulated Noisy Sine Wave\", xlab = \"x\", ylab = \"y\", pch = 16, col = \"blue\")\nlines(x, sin(x / 10), col = \"red\", lwd = 2) # True sine function for reference"
  },
  {
    "objectID": "Prac 2.html#question-2",
    "href": "Prac 2.html#question-2",
    "title": "Prac 2",
    "section": "Question 2",
    "text": "Question 2\n\nImplementation of the LOWESS algorithm\n\ncustomLowess &lt;- function(x, y, f) {\n  n &lt;- length(x)  # Number of data points\n  k &lt;- ceiling(f * n)  # Number of neighbors\n  \n  y_smooth &lt;- numeric(n)  # Placeholder for smoothed values\n  \n  for (i in 1:n) {\n    # Compute distances and select k-nearest neighbors\n    distances &lt;- abs(x - x[i])\n    neighbors &lt;- order(distances)[1:k]\n    \n    # Compute weights using the tricube kernel\n    dmax &lt;- max(distances[neighbors])\n    weights &lt;- (1 - (distances[neighbors] / dmax)^3)^3\n    weights[distances[neighbors] &gt;= dmax] &lt;- 0  # Enforce zero weight outside dmax\n    \n    # Perform weighted least squares regression\n    X &lt;- cbind(1, x[neighbors])  # Design matrix with intercept\n    W &lt;- diag(weights)  # Diagonal weight matrix\n    beta &lt;- solve(t(X) %*% W %*% X) %*% (t(X) %*% W %*% y[neighbors])  # (X'WX)^(-1) X'W y\n    \n    # Compute the smoothed value\n    y_smooth[i] &lt;- beta[1] + beta[2] * x[i]\n  }\n  \n  return(y_smooth)\n}\n\n# Example usage\nset.seed(1)\nx &lt;- seq(1, 100, by = 1)\ny &lt;- sin(x / 10) + rnorm(length(x), mean = 0, sd = 0.2)\n\ny_smooth &lt;- customLowess(x, y, f = 0.2)  # Apply LOWESS with 20% span\n\n# Plot results\nplot(x, y, main = \"LOWESS Smoothing\", xlab = \"x\", ylab = \"y\", pch = 16, col = \"blue\")\nlines(x, y_smooth, col = \"red\", lwd = 2)  # Smoothed curve\nlines(x, sin(x / 10), col = \"green\", lwd = 2, lty = 2)  # True function\nlegend(\"topright\", legend = c(\"Noisy Data\", \"Smoothed LOWESS\", \"True Function\"),\n       col = c(\"blue\", \"red\", \"green\"), pch = c(16, NA, NA), lty = c(NA, 1, 2))"
  },
  {
    "objectID": "Prac 2.html#question-3",
    "href": "Prac 2.html#question-3",
    "title": "Prac 2",
    "section": "Question 3",
    "text": "Question 3\n\nCompare with R’s Built-in lowess():\n\n# Set seed for reproducibility\nset.seed(1)\n\n# Generate x and noisy y values\nx &lt;- seq(1, 100, by = 1)\ny &lt;- sin(x / 10) + rnorm(length(x), mean = 0, sd = 0.2)\n\n# Apply custom LOWESS function\ny_smooth_custom &lt;- customLowess(x, y, f = 0.2)\n\n# Apply built-in lowess function with f = 0.2 and iter = 0\nlowess_result &lt;- lowess(x, y, f = 0.2, iter = 0)\n\n# Plot original noisy data\nplot(x, y, main = \"Comparison: Custom LOWESS vs Built-in lowess()\", xlab = \"x\", ylab = \"y\",\n     pch = 16, col = \"blue\")\n\n# Add custom LOWESS curve\nlines(x, y_smooth_custom, col = \"red\", lwd = 2)\n\n# Add built-in LOWESS curve\nlines(lowess_result, col = \"green\", lwd = 2, lty = 2)\n\n# Add true function for reference\nlines(x, sin(x / 10), col = \"black\", lwd = 2, lty = 3)\n\n# Add legend\nlegend(\"topright\", legend = c(\"Noisy Data\", \"Custom LOWESS\", \"Built-in lowess\", \"True Function\"),\n       col = c(\"blue\", \"red\", \"green\", \"black\"), pch = c(16, NA, NA, NA), \n       lty = c(NA, 1, 2, 3), lwd = c(NA, 2, 2, 2))"
  }
]